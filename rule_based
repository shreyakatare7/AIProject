import pandas as pd

# load csv file 
df = pd.read_csv('lung cancer survey.csv')

# handling missing values (make sure your column names match the dataset)
df.fillna({"SMOKING": 1, "YELLOW_FINGERS": 1, "ANXIETY": 1, "PEER_PRESSURE": 1, 
           "CHRONIC DISEASE": 1, "FATIGUE": 1, "ALLERGY": 1, "WHEEZING": 1, 
           "ALCOHOL CONSUMING": 1, "COUGHING": 1, "SHORTNESS OF BREATH": 1, 
           "SWALLOWING DIFFICULTY": 1, "CHEST PAIN": 1, "LUNG CANCER": "NO"}, inplace=True)

df.columns = df.columns.str.strip()
# converting rows of dataset into facts (ensure the column names are consistent)
def process_row_to_facts(row):
    return {
        "SMOKING": row["SMOKING"],
        "YELLOW_FINGERS": row["YELLOW_FINGERS"],
        "ANXIETY": row["ANXIETY"],
        "PEER_PRESSURE": row["PEER_PRESSURE"],
        "CHRONIC_DISEASE": row["CHRONIC DISEASE"],
        "FATIGUE": row["FATIGUE"],
        "ALLERGY": row["ALLERGY"],
        "WHEEZING": row["WHEEZING"],
        "ALCOHOL_CONSUMING": row["ALCOHOL CONSUMING"],
        "COUGHING": row["COUGHING"],
        "SHORTNESS_BREATH": row["SHORTNESS OF BREATH"],
        "SWALLOWING_DIFFICULTY": row["SWALLOWING DIFFICULTY"],
        "CHEST_PAIN": row["CHEST PAIN"],
        "LUNG_CANCER": row["LUNG_CANCER"]
    }

# convert the entire dataset into facts
facts_list = [process_row_to_facts(row) for index, row in df.iterrows()]

# mapping categorical symptom data to boolean values (if applicable)
df["LUNG_CANCER"] = df["LUNG_CANCER"].map({"YES": True, "NO": False})

# define the rule-based system
class RuleBasedSystem:
    def __init__(self):
        self.rules = []

    def add_rule(self, condition, action):
        # adds a new rule (condition, action) to the system
        self.rules.append((condition, action))

    def evaluate(self, facts):
        # evaluates the facts against the rules and triggers the appropriate diagnosis
        for condition, action in self.rules:
            if condition(facts):
                return action(facts)
        return "No diagnosis made"

# action functions
def diagnose_lung_cancer(facts):
    return "Lung Cancer Diagnosed"

def diagnose_no_cancer(facts):
    return "No Lung Cancer"

# rule conditions
def rule_lung_cancer(facts):
    # Triggers when certain symptoms are present
    return (facts["SMOKING"] == 2 or facts["YELLOW_FINGERS"] == 2 or 
            facts["CHEST_PAIN"] == 2 or facts["COUGHING"] == 2)

def rule_no_lung_cancer(facts):
    # Triggers when symptoms are mild
    return (facts["SMOKING"] == 1 or facts["YELLOW_FINGERS"] == 1 or
            facts["ANXIETY"] == 1)

# create the rule-based system
system = RuleBasedSystem()

# add rules
system.add_rule(rule_lung_cancer, diagnose_lung_cancer)
system.add_rule(rule_no_lung_cancer, diagnose_no_cancer)

# apply the rules to each row in the dataset
results = []
deep_learning_cases = [] # collect cases with "No diagosis made" for deep learning

for index, row in df.iterrows():
    facts = process_row_to_facts(row)
    diagnosis = system.evaluate(facts)
    
    # If no diagnosis is made, flag for deep learning
    if diagnosis == "No diagnosis made":
        deep_learning_cases.append(facts)  # Collect cases for deep learning
    
    results.append(diagnosis)

# output the diagnosis results
df["DIAGNOSIS_RESULT"] = results
print(df[["SMOKING", "YELLOW_FINGERS", "ANXIETY", "PEER_PRESSURE", "CHRONIC DISEASE", "FATIGUE", "ALLERGY",
          "WHEEZING", "ALCOHOL CONSUMING", "COUGHING", "SHORTNESS OF BREATH", "SWALLOWING DIFFICULTY", 
          "CHEST PAIN", "DIAGNOSIS_RESULT"]])

# Print cases that need deep learning for further analysis
print(f"Cases sent to deep learning: {deep_learning_cases}")
